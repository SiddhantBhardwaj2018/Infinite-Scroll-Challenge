{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhard\\\\Desktop\\\\React Projects Compendium\\\\infinite-scroll-challenge\\\\client\\\\src\\\\components\\\\Images.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Image from './Image';\nexport class Images extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: [],\n      count: 30,\n      start: 1\n    };\n\n    this.fetchImages = () => {\n      const {\n        count,\n        start\n      } = this.state;\n      axios.get(`/api/photos?count=${count}&start=${start}`).then(res => this.setState({\n        images: res.data\n      }));\n    };\n  }\n\n  componentDidMount() {\n    const {\n      count,\n      start\n    } = this.state;\n    axios.get(`/api/photos?count=${count}&start=${start}`).then(res => this.setState({\n      images: res.data\n    }));\n  }\n\n  render() {\n    console.log(this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"images\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: this.state.images,\n      next: this.fetchImages,\n      hasMore: true,\n      loader: /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 111\n        }\n      }, \"Loading....\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, this.setState.state.images.map(image => /*#__PURE__*/React.createElement(Image, {\n      key: image.id,\n      image: image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 24\n      }\n    }))));\n  }\n\n}\nexport default Images;","map":{"version":3,"sources":["C:/Users/bhard/Desktop/React Projects Compendium/infinite-scroll-challenge/client/src/components/Images.js"],"names":["React","Component","axios","InfiniteScroll","Image","Images","state","images","count","start","fetchImages","get","then","res","setState","data","componentDidMount","render","console","log","map","image","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAAA;AAAA;AAAA,SAElCK,KAFkC,GAE1B;AACJC,MAAAA,MAAM,EAAC,EADH;AAEJC,MAAAA,KAAK,EAAE,EAFH;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAF0B;;AAAA,SAalCC,WAbkC,GAapB,MAAM;AAChB,YAAM;AAAEF,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAmB,KAAKH,KAA9B;AACAJ,MAAAA,KAAK,CAACS,GAAN,CAAW,qBAAoBH,KAAM,UAASC,KAAM,EAApD,EAAuDG,IAAvD,CAA4DC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAAEM,GAAG,CAACE;AAAd,OAAd,CAAnE;AACH,KAhBiC;AAAA;;AAQlCC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmB,KAAKH,KAA9B;AACAJ,IAAAA,KAAK,CAACS,GAAN,CAAW,qBAAoBH,KAAM,UAASC,KAAM,EAApD,EAAuDG,IAAvD,CAA4DC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEP,MAAAA,MAAM,EAAEM,GAAG,CAACE;AAAd,KAAd,CAAnE;AACH;;AAODE,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,UAAU,EAAE,KAAKA,KAAL,CAAWC,MAAvC;AAA+C,MAAA,IAAI,EAAE,KAAKG,WAA1D;AAAuE,MAAA,OAAO,EAAE,IAAhF;AAAsF,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKI,QAAL,CAAcR,KAAd,CAAoBC,MAApB,CAA2Ba,GAA3B,CAA+BC,KAAK,iBACjC,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,KAAK,CAACC,EAAlB;AAAsB,MAAA,KAAK,EAAED,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADJ,CADJ,CADJ;AASH;;AA7BiC;AAgCtC,eAAehB,MAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport Image from './Image'\r\n\r\nexport class Images extends Component {\r\n\r\n    state = {\r\n        images:[],\r\n        count: 30,\r\n        start: 1\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { count, start } = this.state;\r\n        axios.get(`/api/photos?count=${count}&start=${start}`).then(res => this.setState({ images: res.data }))\r\n    }\r\n\r\n    fetchImages = () => {\r\n        const { count, start } = this.state;\r\n        axios.get(`/api/photos?count=${count}&start=${start}`).then(res => this.setState({ images: res.data }))\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div className=\"images\">\r\n                <InfiniteScroll dataLength={this.state.images} next={this.fetchImages} hasMore={true} loader={<h4>Loading....</h4>}>\r\n                   {this.setState.state.images.map(image => (\r\n                       <Image key={image.id} image={image} />\r\n                   ))}\r\n                </InfiniteScroll>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Images\r\n"]},"metadata":{},"sourceType":"module"}